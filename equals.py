import utils


def compare_wfns(source, target):
    result = {
        'part': utils.compare(get_attribute_from_wfn(source, 'part'), get_attribute_from_wfn(target, 'part')),
        'vendor': utils.compare(get_attribute_from_wfn(source, 'vendor'), get_attribute_from_wfn(target, 'vendor')),
        'product': utils.compare(get_attribute_from_wfn(source, 'product'), get_attribute_from_wfn(target, 'product')),
        'version': utils.compare(get_attribute_from_wfn(source, 'version'), get_attribute_from_wfn(target, 'version')),
        'update': utils.compare(get_attribute_from_wfn(source, 'update'), get_attribute_from_wfn(target, 'update')),
        'edition': utils.compare(get_attribute_from_wfn(source, 'edition'), get_attribute_from_wfn(target, 'edition')),
        'language': utils.compare(get_attribute_from_wfn(source, 'language'),
                                  get_attribute_from_wfn(target, 'language')),
        'sw_edition': utils.compare(get_attribute_from_wfn(source, 'sw_edition'),
                                    get_attribute_from_wfn(target, 'sw_edition')),
        'target_sw': utils.compare(get_attribute_from_wfn(source, 'target_sw'),
                                   get_attribute_from_wfn(target, 'target_sw')),
        'target_hw': utils.compare(get_attribute_from_wfn(source, 'target_hw'),
                                   get_attribute_from_wfn(target, 'target_hw')),
        'other': utils.compare(get_attribute_from_wfn(source, 'other'), get_attribute_from_wfn(target, 'other')),
    }
    return result


def cpe_equal_high(source, target):
    source_wfn = utils.unbind_fs(source)
    target_wfn = utils.unbind_fs(target)
    result_list = compare_wfns(source_wfn, target_wfn)
    for key in result_list.keys():
        if result_list[key] != 'EQUAL':
            return False
    return True


def cpe_equal_low(source, target):
    source_wfn = utils.unbind_fs(source)
    target_wfn = utils.unbind_fs(target)
    result_list = compare_wfns(source_wfn, target_wfn)
    if result_list["part"] == 'EQUAL' and result_list["vendor"] == 'EQUAL' and result_list["product"] == 'EQUAL':
        return True
    return False


def cpe_subset(source, target):
    source_wfn = utils.unbind_fs(source)
    target_wfn = utils.unbind_fs(target)
    result_list = compare_wfns(source_wfn, target_wfn)
    for key in result_list.keys():
        if result_list[key] != 'SUBSET' and result_list[key] != 'EQUAL':
            return False
    return True


def cpe_superset(source, target):
    source_wfn = utils.unbind_fs(source)
    target_wfn = utils.unbind_fs(target)
    result_list = compare_wfns(source_wfn, target_wfn)
    for key in result_list.keys():
        if result_list[key] != 'SUPERSET' and result_list[key] != 'EQUAL':
            return False
    return True


def cpe_disjoint(source, target):
    source_wfn = utils.unbind_fs(source)
    target_wfn = utils.unbind_fs(target)
    result_list = compare_wfns(source_wfn, target_wfn)
    if result_list["part"] == 'EQUAL' and result_list["vendor"] == 'EQUAL' and result_list["product"] == 'EQUAL':
        return False
    for key in result_list.keys():
        if result_list[key] == 'DISJOINT':
            return True
    return False


def get_attribute_from_wfn(wfn, attribute):
    try:
        return wfn[attribute]
    except:
        return 'ANY'
